Book.java
___________

@Entity
public class Book implements Serializable {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    private String name;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
_____________________________________________________

class.java
_____________

@Entity
public class Issue implements Serializable {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    private LocalDate issueDate;

    private LocalDate returnDate;

    private Integer period;

    private Integer fine;

    @ManyToOne
    @JsonIgnoreProperties(value = "issues", allowSetters = true)
    private Book book;

    @ManyToOne
    @JsonIgnoreProperties(value = "issues", allowSetters = true)
    private User user;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public LocalDate getIssueDate() {
        return issueDate;
    }

    public void setIssueDate(LocalDate issueDate) {
        this.issueDate = issueDate;
    }

    public LocalDate getReturnDate() {
        return returnDate;
    }

    public void setReturnDate(LocalDate returnDate) {
        this.returnDate = returnDate;
    }

    public Integer getPeriod() {
        return period;
    }

    public void setPeriod(Integer period) {
        this.period = period;
    }

    public Integer getFine() {
        return fine;
    }

    public void setFine(Integer fine) {
        this.fine = fine;
    }

    public Book getBook() {
        return book;
    }

    public void setBook(Book book) {
        this.book = book;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}
____________________________________________

User.java
_____________

@Entity
public class User implements Serializable {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    private String username;

    private boolean subscribed = false;

    public boolean getSubscribed() {
        return subscribed;
    }

    public void setSubscribed(boolean subscribed) {
        this.subscribed = subscribed;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }
}
_____________________________________________

LibraryController.java
_________________________

@RestController
@RequestMapping("/api/v1")
public class LibraryController {

@Autowired
private UserRepository userRepo;

@Autowired
private IssueRepository issueRepo;

@PostMapping("/issue-book")
public ResponseEntity<Issue> issueBook(@RequestBody Issue issue) {
    Optional<User> userOpt = userRepo.findById(issue.getUser().getId());
    if (userOpt.isPresent()) {
        User user = userOpt.get();
        if (user.getSubscribed()) {
        Issue savedIssue = issueRepo.save(issue);
        return ResponseEntity.ok(savedIssue);
        } else {
            throw new UserNotSubscribedException("User subscription has expired");
                }
        } 
    else {
        return ResponseEntity.noContent().build();
        }
}

@PostMapping("/user")
public ResponseEntity<User> createUser(@RequestBody User user) {
    User savedUser = userRepo.save(user);
    return ResponseEntity.ok(savedUser);
}

@GetMapping("/renew-user-subscription/{id}")
public ResponseEntity<User> renewUserSubscription(@PathVariable Long id) {
    Optional<User> userOpt = userRepo.findById(id);
    if (userOpt.isPresent()) {
        User user = userOpt.get();
        user.setSubscribed(true);
        userRepo.save(user);
        return ResponseEntity.ok(user);
    }else {
        return ResponseEntity.noContent().build();
        }
    }
}
______________________________________________________

userNotSubscribedException.java
__________________________________

@ResponseStatus(HttpStatus.FORBIDDEN)
public class UserNotSubscribedException extends RuntimeException {
     public UserNotSubscribedException(String msg) {
    super(msg);
  }
}
_______________________________________________________________

websecurityConfigurer.java
_______________________________

@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/v1/issue-book").permitAll()
            .anyRequest().authenticated()
            .and().httpBasic();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}